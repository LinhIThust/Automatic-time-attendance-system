
RFID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000008ca  0000095e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800066  00800066  00000964  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000994  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001aeb  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ac  00000000  00000000  0000259b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000787  00000000  00000000  00002f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000036d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073f  00000000  00000000  00003a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011b9  00000000  00000000  00004167  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005320  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	c7 00       	.word	0x00c7	; ????

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d4 e0       	ldi	r29, 0x04	; 4
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	10 e0       	ldi	r17, 0x00	; 0
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	ea ec       	ldi	r30, 0xCA	; 202
  6a:	f8 e0       	ldi	r31, 0x08	; 8
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0
  72:	a6 36       	cpi	r26, 0x66	; 102
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	a6 e6       	ldi	r26, 0x66	; 102
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	aa 36       	cpi	r26, 0x6A	; 106
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	cb e2       	ldi	r28, 0x2B	; 43
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	21 97       	sbiw	r28, 0x01	; 1
  92:	fe 01       	movw	r30, r28
  94:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__tablejump2__>
  98:	ca 32       	cpi	r28, 0x2A	; 42
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  a2:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z9uart_initv>:
unsigned char USART_Receive( void ){
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
	/* Get and return received data from buffer */
	return UDR;
}
  aa:	10 bc       	out	0x20, r1	; 32
  ac:	87 e6       	ldi	r24, 0x67	; 103
  ae:	89 b9       	out	0x09, r24	; 9
  b0:	88 e1       	ldi	r24, 0x18	; 24
  b2:	8a b9       	out	0x0a, r24	; 10
  b4:	86 e8       	ldi	r24, 0x86	; 134
  b6:	80 bd       	out	0x20, r24	; 32
  b8:	08 95       	ret

000000ba <_Z14USART_Transmith>:
  ba:	5d 9b       	sbis	0x0b, 5	; 11
  bc:	fe cf       	rjmp	.-4      	; 0xba <_Z14USART_Transmith>
  be:	8c b9       	out	0x0c, r24	; 12
  c0:	08 95       	ret

000000c2 <_Z14SPI_MasterInitv>:
void SPI_MasterInit(void)
{
	DDRB |= (1<<SCK_PIN)|(1<<MOSI_PIN)|(1<<SS);
  c2:	87 b3       	in	r24, 0x17	; 23
  c4:	8c 62       	ori	r24, 0x2C	; 44
  c6:	87 bb       	out	0x17, r24	; 23
	SPCR |=	(1<<SPE)|(1<<MSTR)|(1<<SPR0);
  c8:	8d b1       	in	r24, 0x0d	; 13
  ca:	81 65       	ori	r24, 0x51	; 81
  cc:	8d b9       	out	0x0d, r24	; 13
	sbi(PORTB,SS);
  ce:	c2 9a       	sbi	0x18, 2	; 24
  d0:	08 95       	ret

000000d2 <_Z11_SendStringPc>:
}

void _SendString(char str[])
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ec 01       	movw	r28, r24
	int i =0;
	
	while (str[i] != 0x00)
  d8:	88 81       	ld	r24, Y
  da:	88 23       	and	r24, r24
  dc:	31 f0       	breq	.+12     	; 0xea <_Z11_SendStringPc+0x18>
  de:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_Transmit(str[i]);
  e0:	0e 94 5d 00 	call	0xba	; 0xba <_Z14USART_Transmith>

void _SendString(char str[])
{
	int i =0;
	
	while (str[i] != 0x00)
  e4:	89 91       	ld	r24, Y+
  e6:	81 11       	cpse	r24, r1
  e8:	fb cf       	rjmp	.-10     	; 0xe0 <_Z11_SendStringPc+0xe>
	{
		USART_Transmit(str[i]);
		i++;
	}
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:

MFRC522 rfid(2,6);

int main(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	60 97       	sbiw	r28, 0x10	; 16
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
	SPI_MasterInit();
 104:	0e 94 61 00 	call	0xc2	; 0xc2 <_Z14SPI_MasterInitv>
	uart_init();
 108:	0e 94 55 00 	call	0xaa	; 0xaa <_Z9uart_initv>
	DDRA = 0xff;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
 110:	84 bb       	out	0x14, r24	; 20
	rfid.begin();
 112:	86 e6       	ldi	r24, 0x66	; 102
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 8a 01 	call	0x314	; 0x314 <_ZN7MFRC5225beginEv>
	_SendString("START");
 11a:	80 e6       	ldi	r24, 0x60	; 96
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 69 00 	call	0xd2	; 0xd2 <_Z11_SendStringPc>
	uint8_t status;
	uint8_t data[MAX_LEN];
	while(1)
	{
		
		memset( data, '\0', sizeof(char)*MAX_LEN );
 122:	68 94       	set
 124:	99 24       	eor	r9, r9
 126:	94 f8       	bld	r9, 4
 128:	ce 01       	movw	r24, r28
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	5c 01       	movw	r10, r24
 12e:	c8 2e       	mov	r12, r24
 130:	db 2c       	mov	r13, r11
 132:	7e 01       	movw	r14, r28
 134:	91 e1       	ldi	r25, 0x11	; 17
 136:	e9 0e       	add	r14, r25
 138:	f1 1c       	adc	r15, r1
 13a:	f5 01       	movw	r30, r10
 13c:	89 2d       	mov	r24, r9
 13e:	11 92       	st	Z+, r1
 140:	8a 95       	dec	r24
 142:	e9 f7       	brne	.-6      	; 0x13e <main+0x4e>
		status = rfid.requestTag(MF1_REQIDL, data);
 144:	4c 2d       	mov	r20, r12
 146:	5d 2d       	mov	r21, r13
 148:	66 e2       	ldi	r22, 0x26	; 38
 14a:	86 e6       	ldi	r24, 0x66	; 102
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <_ZN7MFRC52210requestTagEhPh>
		//sendz(status);
		if (status == MI_OK) {
 152:	81 11       	cpse	r24, r1
 154:	f2 cf       	rjmp	.-28     	; 0x13a <main+0x4a>
			status = rfid.antiCollision(data);
 156:	6c 2d       	mov	r22, r12
 158:	7d 2d       	mov	r23, r13
 15a:	86 e6       	ldi	r24, 0x66	; 102
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 1e 03 	call	0x63c	; 0x63c <_ZN7MFRC52213antiCollisionEPh>
 162:	85 01       	movw	r16, r10
			for(unsigned char i =0;i<MAX_LEN;i++)
			{
				USART_Transmit(data[i]);
 164:	f8 01       	movw	r30, r16
 166:	81 91       	ld	r24, Z+
 168:	8f 01       	movw	r16, r30
 16a:	0e 94 5d 00 	call	0xba	; 0xba <_Z14USART_Transmith>
		memset( data, '\0', sizeof(char)*MAX_LEN );
		status = rfid.requestTag(MF1_REQIDL, data);
		//sendz(status);
		if (status == MI_OK) {
			status = rfid.antiCollision(data);
			for(unsigned char i =0;i<MAX_LEN;i++)
 16e:	0e 15       	cp	r16, r14
 170:	1f 05       	cpc	r17, r15
 172:	c1 f7       	brne	.-16     	; 0x164 <main+0x74>
			{
				USART_Transmit(data[i]);
				
			}
			sbi(PORTC,5);
 174:	ad 9a       	sbi	0x15, 5	; 21
			rfid.selectTag(data);
 176:	6c 2d       	mov	r22, r12
 178:	7d 2d       	mov	r23, r13
 17a:	86 e6       	ldi	r24, 0x66	; 102
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 cb 03 	call	0x796	; 0x796 <_ZN7MFRC5229selectTagEPh>
			// Stop the tag and get ready for reading a new tag.
			rfid.haltTag();
 182:	86 e6       	ldi	r24, 0x66	; 102
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN7MFRC5227haltTagEv>
			cbi(PORTC,5);
 18a:	ad 98       	cbi	0x15, 5	; 21
 18c:	d6 cf       	rjmp	.-84     	; 0x13a <main+0x4a>

0000018e <_GLOBAL__sub_I__Z9uart_initv>:
		USART_Transmit(str[i]);
		i++;
	}
}

MFRC522 rfid(2,6);
 18e:	46 e0       	ldi	r20, 0x06	; 6
 190:	50 e0       	ldi	r21, 0x00	; 0
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	86 e6       	ldi	r24, 0x66	; 102
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN7MFRC522C1Eii>
 19e:	08 95       	ret

000001a0 <_Z18SPI_MasterTransmith>:

uint8_t MFRC522::getFirmwareVersion() {
	uint8_t response;
	response = readFromRegister(0x37);
	return response;
}
 1a0:	8f b9       	out	0x0f, r24	; 15
 1a2:	77 9b       	sbis	0x0e, 7	; 14
 1a4:	fe cf       	rjmp	.-4      	; 0x1a2 <_Z18SPI_MasterTransmith+0x2>
 1a6:	8f b1       	in	r24, 0x0f	; 15
 1a8:	08 95       	ret

000001aa <_ZN7MFRC522C1Eii>:
 1aa:	fc 01       	movw	r30, r24
 1ac:	60 83       	st	Z, r22
 1ae:	71 83       	std	Z+1, r23	; 0x01
 1b0:	77 b3       	in	r23, 0x17	; 23
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	c9 01       	movw	r24, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <_ZN7MFRC522C1Eii+0x14>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <_ZN7MFRC522C1Eii+0x10>
 1c2:	87 2b       	or	r24, r23
 1c4:	87 bb       	out	0x17, r24	; 23
 1c6:	68 b3       	in	r22, 0x18	; 24
 1c8:	c9 01       	movw	r24, r18
 1ca:	00 80       	ld	r0, Z
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <_ZN7MFRC522C1Eii+0x28>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	0a 94       	dec	r0
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <_ZN7MFRC522C1Eii+0x24>
 1d6:	86 2b       	or	r24, r22
 1d8:	88 bb       	out	0x18, r24	; 24
 1da:	42 83       	std	Z+2, r20	; 0x02
 1dc:	53 83       	std	Z+3, r21	; 0x03
 1de:	54 b3       	in	r21, 0x14	; 20
 1e0:	c9 01       	movw	r24, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <_ZN7MFRC522C1Eii+0x3e>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	4a 95       	dec	r20
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <_ZN7MFRC522C1Eii+0x3a>
 1ec:	85 2b       	or	r24, r21
 1ee:	84 bb       	out	0x14, r24	; 20
 1f0:	85 b3       	in	r24, 0x15	; 21
 1f2:	02 80       	ldd	r0, Z+2	; 0x02
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <_ZN7MFRC522C1Eii+0x50>
 1f6:	22 0f       	add	r18, r18
 1f8:	33 1f       	adc	r19, r19
 1fa:	0a 94       	dec	r0
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <_ZN7MFRC522C1Eii+0x4c>
 1fe:	28 2b       	or	r18, r24
 200:	25 bb       	out	0x15, r18	; 21
 202:	08 95       	ret

00000204 <_ZN7MFRC52215writeToRegisterEhh>:
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
 20e:	8c 01       	movw	r16, r24
 210:	f4 2e       	mov	r15, r20
 212:	98 b3       	in	r25, 0x18	; 24
 214:	c1 e0       	ldi	r28, 0x01	; 1
 216:	d0 e0       	ldi	r29, 0x00	; 0
 218:	9e 01       	movw	r18, r28
 21a:	f8 01       	movw	r30, r16
 21c:	00 80       	ld	r0, Z
 21e:	02 c0       	rjmp	.+4      	; 0x224 <_ZN7MFRC52215writeToRegisterEhh+0x20>
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <_ZN7MFRC52215writeToRegisterEhh+0x1c>
 228:	82 2f       	mov	r24, r18
 22a:	80 95       	com	r24
 22c:	89 23       	and	r24, r25
 22e:	88 bb       	out	0x18, r24	; 24
 230:	86 2f       	mov	r24, r22
 232:	88 0f       	add	r24, r24
 234:	8e 77       	andi	r24, 0x7E	; 126
 236:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z18SPI_MasterTransmith>
 23a:	8f 2d       	mov	r24, r15
 23c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z18SPI_MasterTransmith>
 240:	88 b3       	in	r24, 0x18	; 24
 242:	f8 01       	movw	r30, r16
 244:	00 80       	ld	r0, Z
 246:	02 c0       	rjmp	.+4      	; 0x24c <_ZN7MFRC52215writeToRegisterEhh+0x48>
 248:	cc 0f       	add	r28, r28
 24a:	dd 1f       	adc	r29, r29
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <_ZN7MFRC52215writeToRegisterEhh+0x44>
 250:	c8 2b       	or	r28, r24
 252:	c8 bb       	out	0x18, r28	; 24
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	08 95       	ret

00000260 <_ZN7MFRC52216readFromRegisterEh>:
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	8c 01       	movw	r16, r24
 26a:	28 b3       	in	r18, 0x18	; 24
 26c:	c1 e0       	ldi	r28, 0x01	; 1
 26e:	d0 e0       	ldi	r29, 0x00	; 0
 270:	ae 01       	movw	r20, r28
 272:	fc 01       	movw	r30, r24
 274:	00 80       	ld	r0, Z
 276:	02 c0       	rjmp	.+4      	; 0x27c <_ZN7MFRC52216readFromRegisterEh+0x1c>
 278:	44 0f       	add	r20, r20
 27a:	55 1f       	adc	r21, r21
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <_ZN7MFRC52216readFromRegisterEh+0x18>
 280:	94 2f       	mov	r25, r20
 282:	90 95       	com	r25
 284:	92 23       	and	r25, r18
 286:	98 bb       	out	0x18, r25	; 24
 288:	86 2f       	mov	r24, r22
 28a:	88 0f       	add	r24, r24
 28c:	8e 77       	andi	r24, 0x7E	; 126
 28e:	80 68       	ori	r24, 0x80	; 128
 290:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z18SPI_MasterTransmith>
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z18SPI_MasterTransmith>
 29a:	98 b3       	in	r25, 0x18	; 24
 29c:	f8 01       	movw	r30, r16
 29e:	00 80       	ld	r0, Z
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <_ZN7MFRC52216readFromRegisterEh+0x46>
 2a2:	cc 0f       	add	r28, r28
 2a4:	dd 1f       	adc	r29, r29
 2a6:	0a 94       	dec	r0
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <_ZN7MFRC52216readFromRegisterEh+0x42>
 2aa:	c9 2b       	or	r28, r25
 2ac:	c8 bb       	out	0x18, r28	; 24
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <_ZN7MFRC5225resetEv>:
	sbi(PORTB,_sad);
	return val;
}

void MFRC522::reset() {
	writeToRegister(CommandReg, MFRC522_SOFTRESET);
 2b8:	4f e0       	ldi	r20, 0x0F	; 15
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>
 2c0:	08 95       	ret

000002c2 <_ZN7MFRC52210setBitMaskEhh>:
}

void MFRC522::setBitMask(uint8_t addr, uint8_t mask) {
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	8c 01       	movw	r16, r24
 2cc:	d6 2f       	mov	r29, r22
 2ce:	c4 2f       	mov	r28, r20
	uint8_t current;
	current = readFromRegister(addr);
 2d0:	0e 94 30 01 	call	0x260	; 0x260 <_ZN7MFRC52216readFromRegisterEh>
	writeToRegister(addr, current | mask);
 2d4:	48 2f       	mov	r20, r24
 2d6:	4c 2b       	or	r20, r28
 2d8:	6d 2f       	mov	r22, r29
 2da:	c8 01       	movw	r24, r16
 2dc:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>
}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	08 95       	ret

000002ea <_ZN7MFRC52212clearBitMaskEhh>:

void MFRC522::clearBitMask(uint8_t addr, uint8_t mask) {
 2ea:	0f 93       	push	r16
 2ec:	1f 93       	push	r17
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	8c 01       	movw	r16, r24
 2f4:	d6 2f       	mov	r29, r22
 2f6:	c4 2f       	mov	r28, r20
	uint8_t current;
	current = readFromRegister(addr);
 2f8:	0e 94 30 01 	call	0x260	; 0x260 <_ZN7MFRC52216readFromRegisterEh>
	writeToRegister(addr, current & (~mask));
 2fc:	c0 95       	com	r28
 2fe:	4c 2f       	mov	r20, r28
 300:	48 23       	and	r20, r24
 302:	6d 2f       	mov	r22, r29
 304:	c8 01       	movw	r24, r16
 306:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>
}
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	1f 91       	pop	r17
 310:	0f 91       	pop	r16
 312:	08 95       	ret

00000314 <_ZN7MFRC5225beginEv>:

void MFRC522::begin() {
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	ec 01       	movw	r28, r24
	sbi(PORTB,_sad);
 31a:	28 b3       	in	r18, 0x18	; 24
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	08 80       	ld	r0, Y
 322:	02 c0       	rjmp	.+4      	; 0x328 <_ZN7MFRC5225beginEv+0x14>
 324:	88 0f       	add	r24, r24
 326:	99 1f       	adc	r25, r25
 328:	0a 94       	dec	r0
 32a:	e2 f7       	brpl	.-8      	; 0x324 <_ZN7MFRC5225beginEv+0x10>
 32c:	82 2b       	or	r24, r18
 32e:	88 bb       	out	0x18, r24	; 24

	reset();
 330:	ce 01       	movw	r24, r28
 332:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_ZN7MFRC5225resetEv>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms == 3390 * 48 / 6.78
	writeToRegister(TModeReg, 0x8D);       // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 336:	4d e8       	ldi	r20, 0x8D	; 141
 338:	6a e2       	ldi	r22, 0x2A	; 42
 33a:	ce 01       	movw	r24, r28
 33c:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TPrescalerReg, 0x3E);  // TModeReg[3..0] + TPrescalerReg
 340:	4e e3       	ldi	r20, 0x3E	; 62
 342:	6b e2       	ldi	r22, 0x2B	; 43
 344:	ce 01       	movw	r24, r28
 346:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TReloadRegL, 30);		//48
 34a:	4e e1       	ldi	r20, 0x1E	; 30
 34c:	6d e2       	ldi	r22, 0x2D	; 45
 34e:	ce 01       	movw	r24, r28
 350:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(TReloadRegH, 0);
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	6c e2       	ldi	r22, 0x2C	; 44
 358:	ce 01       	movw	r24, r28
 35a:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>

	writeToRegister(TxAutoReg, 0x40);      // 100%ASK
 35e:	40 e4       	ldi	r20, 0x40	; 64
 360:	65 e1       	ldi	r22, 0x15	; 21
 362:	ce 01       	movw	r24, r28
 364:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>
	writeToRegister(ModeReg, 0x3D);        // CRC initial value 0x6363
 368:	4d e3       	ldi	r20, 0x3D	; 61
 36a:	61 e1       	ldi	r22, 0x11	; 17
 36c:	ce 01       	movw	r24, r28
 36e:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>

	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
 372:	43 e0       	ldi	r20, 0x03	; 3
 374:	64 e1       	ldi	r22, 0x14	; 20
 376:	ce 01       	movw	r24, r28
 378:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN7MFRC52210setBitMaskEhh>
}
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <_ZN7MFRC52210commandTagEhPhiS0_Pi>:

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
 382:	5f 92       	push	r5
 384:	6f 92       	push	r6
 386:	7f 92       	push	r7
 388:	8f 92       	push	r8
 38a:	9f 92       	push	r9
 38c:	af 92       	push	r10
 38e:	bf 92       	push	r11
 390:	cf 92       	push	r12
 392:	df 92       	push	r13
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	6c 01       	movw	r12, r24
 3a2:	56 2e       	mov	r5, r22
 3a4:	c4 2f       	mov	r28, r20
 3a6:	d5 2f       	mov	r29, r21
 3a8:	49 01       	movw	r8, r18
 3aa:	37 01       	movw	r6, r14
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
	uint8_t lastBits, n;
	int i;

	switch (cmd) {
 3ac:	8c e0       	ldi	r24, 0x0C	; 12
 3ae:	68 17       	cp	r22, r24
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <_ZN7MFRC52210commandTagEhPhiS0_Pi+0x32>
 3b2:	c2 c0       	rjmp	.+388    	; 0x538 <__stack+0xd9>
 3b4:	9e e0       	ldi	r25, 0x0E	; 14
 3b6:	69 13       	cpse	r22, r25
 3b8:	08 c0       	rjmp	.+16     	; 0x3ca <_ZN7MFRC52210commandTagEhPhiS0_Pi+0x48>
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
 3ba:	68 94       	set
 3bc:	ff 24       	eor	r15, r15
 3be:	f4 f8       	bld	r15, 4
	uint8_t lastBits, n;
	int i;

	switch (cmd) {
		case MFRC522_AUTHENT:
		irqEn = 0x12;
 3c0:	0f 2e       	mov	r0, r31
 3c2:	f2 e1       	ldi	r31, 0x12	; 18
 3c4:	ef 2e       	mov	r14, r31
 3c6:	f0 2d       	mov	r31, r0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <_ZN7MFRC52210commandTagEhPhiS0_Pi+0x4c>
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
 3ca:	f1 2c       	mov	r15, r1
	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
	uint8_t irqEn = 0x00;
 3cc:	e1 2c       	mov	r14, r1
		break;
		default:
		break;
	}

	writeToRegister(CommIEnReg, irqEn|0x80);    // interrupt request
 3ce:	4e 2d       	mov	r20, r14
 3d0:	40 68       	ori	r20, 0x80	; 128
 3d2:	62 e0       	ldi	r22, 0x02	; 2
 3d4:	c6 01       	movw	r24, r12
 3d6:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>
	clearBitMask(CommIrqReg, 0x80);             // Clear all interrupt requests bits.
 3da:	40 e8       	ldi	r20, 0x80	; 128
 3dc:	64 e0       	ldi	r22, 0x04	; 4
 3de:	c6 01       	movw	r24, r12
 3e0:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.
 3e4:	40 e8       	ldi	r20, 0x80	; 128
 3e6:	6a e0       	ldi	r22, 0x0A	; 10
 3e8:	c6 01       	movw	r24, r12
 3ea:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN7MFRC52210setBitMaskEhh>

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	c6 01       	movw	r24, r12
 3f4:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 3f8:	18 14       	cp	r1, r8
 3fa:	19 04       	cpc	r1, r9
 3fc:	7c f4       	brge	.+30     	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
 3fe:	ac 2e       	mov	r10, r28
 400:	bd 2e       	mov	r11, r29
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 402:	c0 e0       	ldi	r28, 0x00	; 0
 404:	d0 e0       	ldi	r29, 0x00	; 0

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.

	// Write to FIFO
	for (i=0; i < dlen; i++) {
		writeToRegister(FIFODataReg, data[i]);
 406:	f5 01       	movw	r30, r10
 408:	41 91       	ld	r20, Z+
 40a:	5f 01       	movw	r10, r30
 40c:	69 e0       	ldi	r22, 0x09	; 9
 40e:	c6 01       	movw	r24, r12
 410:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 414:	21 96       	adiw	r28, 0x01	; 1
 416:	c8 15       	cp	r28, r8
 418:	d9 05       	cpc	r29, r9
 41a:	ac f3       	brlt	.-22     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
		writeToRegister(FIFODataReg, data[i]);
	}

	// Execute the command.
	writeToRegister(CommandReg, cmd);
 41c:	45 2d       	mov	r20, r5
 41e:	61 e0       	ldi	r22, 0x01	; 1
 420:	c6 01       	movw	r24, r12
 422:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>
	if (cmd == MFRC522_TRANSCEIVE) {
 426:	fc e0       	ldi	r31, 0x0C	; 12
 428:	5f 12       	cpse	r5, r31
 42a:	05 c0       	rjmp	.+10     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
		setBitMask(BitFramingReg, 0x80);  // StartSend=1, transmission of data starts
 42c:	40 e8       	ldi	r20, 0x80	; 128
 42e:	6d e0       	ldi	r22, 0x0D	; 13
 430:	c6 01       	movw	r24, r12
 432:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN7MFRC52210setBitMaskEhh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 436:	81 ee       	ldi	r24, 0xE1	; 225
 438:	94 e0       	ldi	r25, 0x04	; 4
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 440:	00 00       	nop
	i = 25; // Max wait time is 25ms.
	do {
		_delay_ms(5);
		// CommIRqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
 442:	64 e0       	ldi	r22, 0x04	; 4
 444:	c6 01       	movw	r24, r12
 446:	0e 94 30 01 	call	0x260	; 0x260 <_ZN7MFRC52216readFromRegisterEh>
 44a:	b8 2e       	mov	r11, r24
 44c:	c8 e1       	ldi	r28, 0x18	; 24
 44e:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 450:	9f 2d       	mov	r25, r15
 452:	91 60       	ori	r25, 0x01	; 1
 454:	f9 2e       	mov	r15, r25
 456:	0e c0       	rjmp	.+28     	; 0x474 <__stack+0x15>
 458:	e1 ee       	ldi	r30, 0xE1	; 225
 45a:	f4 e0       	ldi	r31, 0x04	; 4
 45c:	31 97       	sbiw	r30, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__stack+0x3>
 462:	00 00       	nop
	i = 25; // Max wait time is 25ms.
	do {
		_delay_ms(5);
		// CommIRqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
 464:	64 e0       	ldi	r22, 0x04	; 4
 466:	c6 01       	movw	r24, r12
 468:	0e 94 30 01 	call	0x260	; 0x260 <_ZN7MFRC52216readFromRegisterEh>
 46c:	b8 2e       	mov	r11, r24
 46e:	21 97       	sbiw	r28, 0x01	; 1
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 470:	09 f4       	brne	.+2      	; 0x474 <__stack+0x15>
 472:	82 c0       	rjmp	.+260    	; 0x578 <__stack+0x119>
 474:	8f 2d       	mov	r24, r15
 476:	8b 21       	and	r24, r11
 478:	79 f3       	breq	.-34     	; 0x458 <__DATA_REGION_LENGTH__+0x58>
 47a:	86 c0       	rjmp	.+268    	; 0x588 <__stack+0x129>

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0

	if (i != 0) { // Request did not time out.
		if(!(readFromRegister(ErrorReg) & 0x1D)) {  // BufferOvfl Collerr CRCErr ProtocolErr
			status = MI_OK;
 47c:	8e 2d       	mov	r24, r14
 47e:	81 70       	andi	r24, 0x01	; 1
 480:	b8 22       	and	r11, r24
 482:	d1 e0       	ldi	r29, 0x01	; 1
 484:	c0 e0       	ldi	r28, 0x00	; 0
 486:	09 f4       	brne	.+2      	; 0x48a <__stack+0x2b>
 488:	d0 e0       	ldi	r29, 0x00	; 0
			if (n & irqEn & 0x01) {
				status = MI_NOTAGERR;
			}

			if (cmd == MFRC522_TRANSCEIVE) {
 48a:	fc e0       	ldi	r31, 0x0C	; 12
 48c:	5f 12       	cpse	r5, r31
 48e:	8a c0       	rjmp	.+276    	; 0x5a4 <__stack+0x145>
				n = readFromRegister(FIFOLevelReg);
 490:	6a e0       	ldi	r22, 0x0A	; 10
 492:	c6 01       	movw	r24, r12
 494:	0e 94 30 01 	call	0x260	; 0x260 <_ZN7MFRC52216readFromRegisterEh>
 498:	f8 2e       	mov	r15, r24
				lastBits = readFromRegister(ControlReg) & 0x07;
 49a:	6c e0       	ldi	r22, 0x0C	; 12
 49c:	c6 01       	movw	r24, r12
 49e:	0e 94 30 01 	call	0x260	; 0x260 <_ZN7MFRC52216readFromRegisterEh>
 4a2:	28 2f       	mov	r18, r24
 4a4:	27 70       	andi	r18, 0x07	; 7
				if (lastBits) {
 4a6:	79 f0       	breq	.+30     	; 0x4c6 <__stack+0x67>
					*rlen = (n-1)*8 + lastBits;
 4a8:	8f 2d       	mov	r24, r15
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	82 0f       	add	r24, r18
 4bc:	91 1d       	adc	r25, r1
 4be:	f3 01       	movw	r30, r6
 4c0:	91 83       	std	Z+1, r25	; 0x01
 4c2:	80 83       	st	Z, r24
 4c4:	0b c0       	rjmp	.+22     	; 0x4dc <__stack+0x7d>
					} else {
					*rlen = n*8;
 4c6:	8f 2d       	mov	r24, r15
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	f3 01       	movw	r30, r6
 4d8:	91 83       	std	Z+1, r25	; 0x01
 4da:	80 83       	st	Z, r24
				}

				if (n == 0) {
 4dc:	ff 20       	and	r15, r15
 4de:	51 f0       	breq	.+20     	; 0x4f4 <__stack+0x95>
				if (n > MAX_LEN) {
					n = MAX_LEN;
				}

				// Reading the recieved data from FIFO.
				for (i=0; i<n; i++) {
 4e0:	8f 2d       	mov	r24, r15
 4e2:	81 31       	cpi	r24, 0x11	; 17
 4e4:	08 f0       	brcs	.+2      	; 0x4e8 <__stack+0x89>
 4e6:	80 e1       	ldi	r24, 0x10	; 16
 4e8:	a8 2e       	mov	r10, r24
 4ea:	b1 2c       	mov	r11, r1
 4ec:	1a 14       	cp	r1, r10
 4ee:	1b 04       	cpc	r1, r11
 4f0:	24 f0       	brlt	.+8      	; 0x4fa <__stack+0x9b>
 4f2:	58 c0       	rjmp	.+176    	; 0x5a4 <__stack+0x145>
 4f4:	aa 24       	eor	r10, r10
 4f6:	a3 94       	inc	r10
 4f8:	b1 2c       	mov	r11, r1
 4fa:	e0 2e       	mov	r14, r16
 4fc:	f1 2e       	mov	r15, r17
 4fe:	00 e0       	ldi	r16, 0x00	; 0
 500:	10 e0       	ldi	r17, 0x00	; 0
					result[i] = readFromRegister(FIFODataReg);
 502:	69 e0       	ldi	r22, 0x09	; 9
 504:	c6 01       	movw	r24, r12
 506:	0e 94 30 01 	call	0x260	; 0x260 <_ZN7MFRC52216readFromRegisterEh>
 50a:	f7 01       	movw	r30, r14
 50c:	81 93       	st	Z+, r24
 50e:	7f 01       	movw	r14, r30
				if (n > MAX_LEN) {
					n = MAX_LEN;
				}

				// Reading the recieved data from FIFO.
				for (i=0; i<n; i++) {
 510:	0f 5f       	subi	r16, 0xFF	; 255
 512:	1f 4f       	sbci	r17, 0xFF	; 255
 514:	0a 15       	cp	r16, r10
 516:	1b 05       	cpc	r17, r11
 518:	a4 f3       	brlt	.-24     	; 0x502 <__stack+0xa3>
 51a:	44 c0       	rjmp	.+136    	; 0x5a4 <__stack+0x145>
	for (i=0; i < dlen; i++) {
		writeToRegister(FIFODataReg, data[i]);
	}

	// Execute the command.
	writeToRegister(CommandReg, cmd);
 51c:	4c e0       	ldi	r20, 0x0C	; 12
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	c6 01       	movw	r24, r12
 522:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
		waitIRq = 0x30;
 526:	0f 2e       	mov	r0, r31
 528:	f0 e3       	ldi	r31, 0x30	; 48
 52a:	ff 2e       	mov	r15, r31
 52c:	f0 2d       	mov	r31, r0
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 52e:	0f 2e       	mov	r0, r31
 530:	f7 e7       	ldi	r31, 0x77	; 119
 532:	ef 2e       	mov	r14, r31
 534:	f0 2d       	mov	r31, r0
 536:	7a cf       	rjmp	.-268    	; 0x42c <__DATA_REGION_LENGTH__+0x2c>
		break;
		default:
		break;
	}

	writeToRegister(CommIEnReg, irqEn|0x80);    // interrupt request
 538:	47 ef       	ldi	r20, 0xF7	; 247
 53a:	62 e0       	ldi	r22, 0x02	; 2
 53c:	c6 01       	movw	r24, r12
 53e:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>
	clearBitMask(CommIrqReg, 0x80);             // Clear all interrupt requests bits.
 542:	40 e8       	ldi	r20, 0x80	; 128
 544:	64 e0       	ldi	r22, 0x04	; 4
 546:	c6 01       	movw	r24, r12
 548:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);             // FlushBuffer=1, FIFO initialization.
 54c:	40 e8       	ldi	r20, 0x80	; 128
 54e:	6a e0       	ldi	r22, 0x0A	; 10
 550:	c6 01       	movw	r24, r12
 552:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN7MFRC52210setBitMaskEhh>

	writeToRegister(CommandReg, MFRC522_IDLE);  // No action, cancel the current command.
 556:	40 e0       	ldi	r20, 0x00	; 0
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	c6 01       	movw	r24, r12
 55c:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>

	// Write to FIFO
	for (i=0; i < dlen; i++) {
 560:	18 14       	cp	r1, r8
 562:	19 04       	cpc	r1, r9
 564:	dc f6       	brge	.-74     	; 0x51c <__stack+0xbd>
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
		waitIRq = 0x30;
 566:	0f 2e       	mov	r0, r31
 568:	f0 e3       	ldi	r31, 0x30	; 48
 56a:	ff 2e       	mov	r15, r31
 56c:	f0 2d       	mov	r31, r0
		case MFRC522_AUTHENT:
		irqEn = 0x12;
		waitIRq = 0x10;
		break;
		case MFRC522_TRANSCEIVE:
		irqEn = 0x77;
 56e:	0f 2e       	mov	r0, r31
 570:	f7 e7       	ldi	r31, 0x77	; 119
 572:	ef 2e       	mov	r14, r31
 574:	f0 2d       	mov	r31, r0
 576:	43 cf       	rjmp	.-378    	; 0x3fe <_ZN7MFRC52210commandTagEhPhiS0_Pi+0x7c>
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0
 578:	40 e8       	ldi	r20, 0x80	; 128
 57a:	6d e0       	ldi	r22, 0x0D	; 13
 57c:	c6 01       	movw	r24, r12
 57e:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN7MFRC52212clearBitMaskEhh>

	setBitMask(TxControlReg, 0x03);        // Turn antenna on.
}

int MFRC522::commandTag(uint8_t cmd, uint8_t *data, int dlen, uint8_t *result, int *rlen) {
	int status = MI_ERR;
 582:	d2 e0       	ldi	r29, 0x02	; 2
 584:	c0 e0       	ldi	r28, 0x00	; 0
 586:	0e c0       	rjmp	.+28     	; 0x5a4 <__stack+0x145>
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = readFromRegister(CommIrqReg);
		i--;
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	clearBitMask(BitFramingReg, 0x80);  // StartSend=0
 588:	40 e8       	ldi	r20, 0x80	; 128
 58a:	6d e0       	ldi	r22, 0x0D	; 13
 58c:	c6 01       	movw	r24, r12
 58e:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN7MFRC52212clearBitMaskEhh>

	if (i != 0) { // Request did not time out.
		if(!(readFromRegister(ErrorReg) & 0x1D)) {  // BufferOvfl Collerr CRCErr ProtocolErr
 592:	66 e0       	ldi	r22, 0x06	; 6
 594:	c6 01       	movw	r24, r12
 596:	0e 94 30 01 	call	0x260	; 0x260 <_ZN7MFRC52216readFromRegisterEh>
 59a:	8d 71       	andi	r24, 0x1D	; 29
 59c:	09 f4       	brne	.+2      	; 0x5a0 <__stack+0x141>
 59e:	6e cf       	rjmp	.-292    	; 0x47c <__stack+0x1d>
				for (i=0; i<n; i++) {
					result[i] = readFromRegister(FIFODataReg);
				}
			}
			} else {
			status = MI_ERR;
 5a0:	d2 e0       	ldi	r29, 0x02	; 2
 5a2:	c0 e0       	ldi	r28, 0x00	; 0
		}
	}
	return status;
}
 5a4:	8d 2f       	mov	r24, r29
 5a6:	9c 2f       	mov	r25, r28
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	ef 90       	pop	r14
 5b4:	df 90       	pop	r13
 5b6:	cf 90       	pop	r12
 5b8:	bf 90       	pop	r11
 5ba:	af 90       	pop	r10
 5bc:	9f 90       	pop	r9
 5be:	8f 90       	pop	r8
 5c0:	7f 90       	pop	r7
 5c2:	6f 90       	pop	r6
 5c4:	5f 90       	pop	r5
 5c6:	08 95       	ret

000005c8 <_ZN7MFRC52210requestTagEhPh>:

int MFRC522::requestTag(uint8_t mode, uint8_t *data) {
 5c8:	af 92       	push	r10
 5ca:	bf 92       	push	r11
 5cc:	cf 92       	push	r12
 5ce:	df 92       	push	r13
 5d0:	ef 92       	push	r14
 5d2:	ff 92       	push	r15
 5d4:	0f 93       	push	r16
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	00 d0       	rcall	.+0      	; 0x5de <_ZN7MFRC52210requestTagEhPh+0x16>
 5de:	cd b7       	in	r28, 0x3d	; 61
 5e0:	de b7       	in	r29, 0x3e	; 62
 5e2:	5c 01       	movw	r10, r24
 5e4:	16 2f       	mov	r17, r22
 5e6:	6a 01       	movw	r12, r20
	int status, len;
	writeToRegister(BitFramingReg, 0x07);  // TxLastBists = BitFramingReg[2..0]
 5e8:	47 e0       	ldi	r20, 0x07	; 7
 5ea:	6d e0       	ldi	r22, 0x0D	; 13
 5ec:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>

	data[0] = mode;
 5f0:	f6 01       	movw	r30, r12
 5f2:	10 83       	st	Z, r17
	status = commandTag(MFRC522_TRANSCEIVE, data, 1, data, &len);
 5f4:	ce 01       	movw	r24, r28
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	7c 01       	movw	r14, r24
 5fa:	86 01       	movw	r16, r12
 5fc:	21 e0       	ldi	r18, 0x01	; 1
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	a6 01       	movw	r20, r12
 602:	6c e0       	ldi	r22, 0x0C	; 12
 604:	c5 01       	movw	r24, r10
 606:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN7MFRC52210commandTagEhPhiS0_Pi>

	if ((status != MI_OK) || (len != 0x10)) {
 60a:	00 97       	sbiw	r24, 0x00	; 0
 60c:	41 f4       	brne	.+16     	; 0x61e <_ZN7MFRC52210requestTagEhPh+0x56>
 60e:	29 81       	ldd	r18, Y+1	; 0x01
 610:	3a 81       	ldd	r19, Y+2	; 0x02
 612:	20 31       	cpi	r18, 0x10	; 16
 614:	31 05       	cpc	r19, r1
 616:	29 f0       	breq	.+10     	; 0x622 <_ZN7MFRC52210requestTagEhPh+0x5a>
		status = MI_ERR;
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	02 c0       	rjmp	.+4      	; 0x622 <_ZN7MFRC52210requestTagEhPh+0x5a>
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	90 e0       	ldi	r25, 0x00	; 0
	}

	return status;
}
 622:	0f 90       	pop	r0
 624:	0f 90       	pop	r0
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	0f 91       	pop	r16
 62e:	ff 90       	pop	r15
 630:	ef 90       	pop	r14
 632:	df 90       	pop	r13
 634:	cf 90       	pop	r12
 636:	bf 90       	pop	r11
 638:	af 90       	pop	r10
 63a:	08 95       	ret

0000063c <_ZN7MFRC52213antiCollisionEPh>:

int MFRC522::antiCollision(uint8_t *serial) {
 63c:	af 92       	push	r10
 63e:	bf 92       	push	r11
 640:	cf 92       	push	r12
 642:	df 92       	push	r13
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	00 d0       	rcall	.+0      	; 0x652 <_ZN7MFRC52213antiCollisionEPh+0x16>
 652:	cd b7       	in	r28, 0x3d	; 61
 654:	de b7       	in	r29, 0x3e	; 62
 656:	5c 01       	movw	r10, r24
 658:	6b 01       	movw	r12, r22
	int status, i, len;
	uint8_t check = 0x00;

	writeToRegister(BitFramingReg, 0x00);  // TxLastBits = BitFramingReg[2..0]
 65a:	40 e0       	ldi	r20, 0x00	; 0
 65c:	6d e0       	ldi	r22, 0x0D	; 13
 65e:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>

	serial[0] = MF1_ANTICOLL;
 662:	83 e9       	ldi	r24, 0x93	; 147
 664:	f6 01       	movw	r30, r12
 666:	80 83       	st	Z, r24
	serial[1] = 0x20;
 668:	80 e2       	ldi	r24, 0x20	; 32
 66a:	81 83       	std	Z+1, r24	; 0x01
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
 66c:	ce 01       	movw	r24, r28
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	7c 01       	movw	r14, r24
 672:	86 01       	movw	r16, r12
 674:	22 e0       	ldi	r18, 0x02	; 2
 676:	30 e0       	ldi	r19, 0x00	; 0
 678:	a6 01       	movw	r20, r12
 67a:	6c e0       	ldi	r22, 0x0C	; 12
 67c:	c5 01       	movw	r24, r10
 67e:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN7MFRC52210commandTagEhPhiS0_Pi>
 682:	bc 01       	movw	r22, r24
	len = len / 8; // len is in bits, and we want each byte.
	if (status == MI_OK) {
 684:	89 2b       	or	r24, r25
 686:	49 f5       	brne	.+82     	; 0x6da <_ZN7MFRC52213antiCollisionEPh+0x9e>
	writeToRegister(BitFramingReg, 0x00);  // TxLastBits = BitFramingReg[2..0]

	serial[0] = MF1_ANTICOLL;
	serial[1] = 0x20;
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
	len = len / 8; // len is in bits, and we want each byte.
 688:	29 81       	ldd	r18, Y+1	; 0x01
 68a:	3a 81       	ldd	r19, Y+2	; 0x02
 68c:	33 23       	and	r19, r19
 68e:	14 f4       	brge	.+4      	; 0x694 <_ZN7MFRC52213antiCollisionEPh+0x58>
 690:	29 5f       	subi	r18, 0xF9	; 249
 692:	3f 4f       	sbci	r19, 0xFF	; 255
 694:	35 95       	asr	r19
 696:	27 95       	ror	r18
 698:	35 95       	asr	r19
 69a:	27 95       	ror	r18
 69c:	35 95       	asr	r19
 69e:	27 95       	ror	r18
	if (status == MI_OK) {
		// The checksum of the tag is the ^ of all the values.
		for (i = 0; i < len-1; i++) {
 6a0:	c9 01       	movw	r24, r18
 6a2:	01 97       	sbiw	r24, 0x01	; 1
 6a4:	18 16       	cp	r1, r24
 6a6:	19 06       	cpc	r1, r25
 6a8:	6c f4       	brge	.+26     	; 0x6c4 <_ZN7MFRC52213antiCollisionEPh+0x88>
 6aa:	f6 01       	movw	r30, r12
 6ac:	ac 01       	movw	r20, r24
 6ae:	d6 01       	movw	r26, r12
 6b0:	a8 0f       	add	r26, r24
 6b2:	b9 1f       	adc	r27, r25
 6b4:	90 e0       	ldi	r25, 0x00	; 0
			check ^= serial[i];
 6b6:	21 91       	ld	r18, Z+
 6b8:	92 27       	eor	r25, r18
	serial[1] = 0x20;
	status = commandTag(MFRC522_TRANSCEIVE, serial, 2, serial, &len);
	len = len / 8; // len is in bits, and we want each byte.
	if (status == MI_OK) {
		// The checksum of the tag is the ^ of all the values.
		for (i = 0; i < len-1; i++) {
 6ba:	ea 17       	cp	r30, r26
 6bc:	fb 07       	cpc	r31, r27
 6be:	d9 f7       	brne	.-10     	; 0x6b6 <_ZN7MFRC52213antiCollisionEPh+0x7a>
 6c0:	9a 01       	movw	r18, r20
 6c2:	03 c0       	rjmp	.+6      	; 0x6ca <_ZN7MFRC52213antiCollisionEPh+0x8e>
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	30 e0       	ldi	r19, 0x00	; 0
			check ^= serial[i];
		}
		// The checksum should be the same as the one provided from the
		// tag (serial[4]).
		if (check != serial[i]) {
 6ca:	f6 01       	movw	r30, r12
 6cc:	e2 0f       	add	r30, r18
 6ce:	f3 1f       	adc	r31, r19
 6d0:	80 81       	ld	r24, Z
 6d2:	89 17       	cp	r24, r25
 6d4:	11 f0       	breq	.+4      	; 0x6da <_ZN7MFRC52213antiCollisionEPh+0x9e>
			status = MI_ERR;
 6d6:	62 e0       	ldi	r22, 0x02	; 2
 6d8:	70 e0       	ldi	r23, 0x00	; 0
		}
	}

	return status;
}
 6da:	cb 01       	movw	r24, r22
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	1f 91       	pop	r17
 6e6:	0f 91       	pop	r16
 6e8:	ff 90       	pop	r15
 6ea:	ef 90       	pop	r14
 6ec:	df 90       	pop	r13
 6ee:	cf 90       	pop	r12
 6f0:	bf 90       	pop	r11
 6f2:	af 90       	pop	r10
 6f4:	08 95       	ret

000006f6 <_ZN7MFRC52212calculateCRCEPhiS0_>:

void MFRC522::calculateCRC(uint8_t *data, int len, uint8_t *result) {
 6f6:	af 92       	push	r10
 6f8:	bf 92       	push	r11
 6fa:	cf 92       	push	r12
 6fc:	df 92       	push	r13
 6fe:	ef 92       	push	r14
 700:	ff 92       	push	r15
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	8c 01       	movw	r16, r24
 70c:	5b 01       	movw	r10, r22
 70e:	6a 01       	movw	r12, r20
 710:	79 01       	movw	r14, r18
	int i;
	uint8_t n;

	clearBitMask(DivIrqReg, 0x04);   // CRCIrq = 0
 712:	44 e0       	ldi	r20, 0x04	; 4
 714:	65 e0       	ldi	r22, 0x05	; 5
 716:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN7MFRC52212clearBitMaskEhh>
	setBitMask(FIFOLevelReg, 0x80);  // Clear the FIFO pointer
 71a:	40 e8       	ldi	r20, 0x80	; 128
 71c:	6a e0       	ldi	r22, 0x0A	; 10
 71e:	c8 01       	movw	r24, r16
 720:	0e 94 61 01 	call	0x2c2	; 0x2c2 <_ZN7MFRC52210setBitMaskEhh>

	//Writing data to the FIFO.
	for (i = 0; i < len; i++) {
 724:	1c 14       	cp	r1, r12
 726:	1d 04       	cpc	r1, r13
 728:	5c f4       	brge	.+22     	; 0x740 <_ZN7MFRC52212calculateCRCEPhiS0_+0x4a>
 72a:	e5 01       	movw	r28, r10
 72c:	ca 0c       	add	r12, r10
 72e:	db 1c       	adc	r13, r11
		writeToRegister(FIFODataReg, data[i]);
 730:	49 91       	ld	r20, Y+
 732:	69 e0       	ldi	r22, 0x09	; 9
 734:	c8 01       	movw	r24, r16
 736:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>

	clearBitMask(DivIrqReg, 0x04);   // CRCIrq = 0
	setBitMask(FIFOLevelReg, 0x80);  // Clear the FIFO pointer

	//Writing data to the FIFO.
	for (i = 0; i < len; i++) {
 73a:	cc 15       	cp	r28, r12
 73c:	dd 05       	cpc	r29, r13
 73e:	c1 f7       	brne	.-16     	; 0x730 <_ZN7MFRC52212calculateCRCEPhiS0_+0x3a>
		writeToRegister(FIFODataReg, data[i]);
	}
	writeToRegister(CommandReg, MFRC522_CALCCRC);
 740:	43 e0       	ldi	r20, 0x03	; 3
 742:	61 e0       	ldi	r22, 0x01	; 1
 744:	c8 01       	movw	r24, r16
 746:	0e 94 02 01 	call	0x204	; 0x204 <_ZN7MFRC52215writeToRegisterEhh>

	// Wait for the CRC calculation to complete.
	i = 0xFF;
	do {
		n = readFromRegister(DivIrqReg);
 74a:	65 e0       	ldi	r22, 0x05	; 5
 74c:	c8 01       	movw	r24, r16
 74e:	0e 94 30 01 	call	0x260	; 0x260 <_ZN7MFRC52216readFromRegisterEh>
 752:	ce ef       	ldi	r28, 0xFE	; 254
 754:	d0 e0       	ldi	r29, 0x00	; 0
 756:	06 c0       	rjmp	.+12     	; 0x764 <_ZN7MFRC52212calculateCRCEPhiS0_+0x6e>
 758:	65 e0       	ldi	r22, 0x05	; 5
 75a:	c8 01       	movw	r24, r16
 75c:	0e 94 30 01 	call	0x260	; 0x260 <_ZN7MFRC52216readFromRegisterEh>
 760:	21 97       	sbiw	r28, 0x01	; 1
		i--;
	} while ((i != 0) && !(n & 0x04));  //CRCIrq = 1
 762:	11 f0       	breq	.+4      	; 0x768 <_ZN7MFRC52212calculateCRCEPhiS0_+0x72>
 764:	82 ff       	sbrs	r24, 2
 766:	f8 cf       	rjmp	.-16     	; 0x758 <_ZN7MFRC52212calculateCRCEPhiS0_+0x62>

	// Read the result from the CRC calculation.
	result[0] = readFromRegister(CRCResultRegL);
 768:	62 e2       	ldi	r22, 0x22	; 34
 76a:	c8 01       	movw	r24, r16
 76c:	0e 94 30 01 	call	0x260	; 0x260 <_ZN7MFRC52216readFromRegisterEh>
 770:	f7 01       	movw	r30, r14
 772:	80 83       	st	Z, r24
	result[1] = readFromRegister(CRCResultRegM);
 774:	61 e2       	ldi	r22, 0x21	; 33
 776:	c8 01       	movw	r24, r16
 778:	0e 94 30 01 	call	0x260	; 0x260 <_ZN7MFRC52216readFromRegisterEh>
 77c:	f7 01       	movw	r30, r14
 77e:	81 83       	std	Z+1, r24	; 0x01
}
 780:	df 91       	pop	r29
 782:	cf 91       	pop	r28
 784:	1f 91       	pop	r17
 786:	0f 91       	pop	r16
 788:	ff 90       	pop	r15
 78a:	ef 90       	pop	r14
 78c:	df 90       	pop	r13
 78e:	cf 90       	pop	r12
 790:	bf 90       	pop	r11
 792:	af 90       	pop	r10
 794:	08 95       	ret

00000796 <_ZN7MFRC5229selectTagEPh>:

uint8_t MFRC522::selectTag(uint8_t *serial) {
 796:	cf 92       	push	r12
 798:	df 92       	push	r13
 79a:	ef 92       	push	r14
 79c:	ff 92       	push	r15
 79e:	0f 93       	push	r16
 7a0:	1f 93       	push	r17
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	2b 97       	sbiw	r28, 0x0b	; 11
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	f8 94       	cli
 7b0:	de bf       	out	0x3e, r29	; 62
 7b2:	0f be       	out	0x3f, r0	; 63
 7b4:	cd bf       	out	0x3d, r28	; 61
 7b6:	6c 01       	movw	r12, r24
	int i, status, len;
	uint8_t sak;
	uint8_t buffer[9];

	buffer[0] = MF1_SELECTTAG;
 7b8:	83 e9       	ldi	r24, 0x93	; 147
 7ba:	8b 83       	std	Y+3, r24	; 0x03
	buffer[1] = 0x70;
 7bc:	80 e7       	ldi	r24, 0x70	; 112
 7be:	8c 83       	std	Y+4, r24	; 0x04
 7c0:	a6 2f       	mov	r26, r22
 7c2:	b7 2f       	mov	r27, r23
 7c4:	fe 01       	movw	r30, r28
 7c6:	35 96       	adiw	r30, 0x05	; 5
 7c8:	9e 01       	movw	r18, r28
 7ca:	26 5f       	subi	r18, 0xF6	; 246
 7cc:	3f 4f       	sbci	r19, 0xFF	; 255
	for (i = 0; i < 5; i++) {
		buffer[i+2] = serial[i];
 7ce:	8d 91       	ld	r24, X+
 7d0:	81 93       	st	Z+, r24
	uint8_t sak;
	uint8_t buffer[9];

	buffer[0] = MF1_SELECTTAG;
	buffer[1] = 0x70;
	for (i = 0; i < 5; i++) {
 7d2:	e2 17       	cp	r30, r18
 7d4:	f3 07       	cpc	r31, r19
 7d6:	d9 f7       	brne	.-10     	; 0x7ce <_ZN7MFRC5229selectTagEPh+0x38>
		buffer[i+2] = serial[i];
	}
	calculateCRC(buffer, 7, &buffer[7]);
 7d8:	9e 01       	movw	r18, r28
 7da:	26 5f       	subi	r18, 0xF6	; 246
 7dc:	3f 4f       	sbci	r19, 0xFF	; 255
 7de:	47 e0       	ldi	r20, 0x07	; 7
 7e0:	50 e0       	ldi	r21, 0x00	; 0
 7e2:	be 01       	movw	r22, r28
 7e4:	6d 5f       	subi	r22, 0xFD	; 253
 7e6:	7f 4f       	sbci	r23, 0xFF	; 255
 7e8:	c6 01       	movw	r24, r12
 7ea:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN7MFRC52212calculateCRCEPhiS0_>

	status = commandTag(MFRC522_TRANSCEIVE, buffer, 9, buffer, &len);
 7ee:	ce 01       	movw	r24, r28
 7f0:	01 96       	adiw	r24, 0x01	; 1
 7f2:	7c 01       	movw	r14, r24
 7f4:	8e 01       	movw	r16, r28
 7f6:	0d 5f       	subi	r16, 0xFD	; 253
 7f8:	1f 4f       	sbci	r17, 0xFF	; 255
 7fa:	29 e0       	ldi	r18, 0x09	; 9
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	a8 01       	movw	r20, r16
 800:	6c e0       	ldi	r22, 0x0C	; 12
 802:	c6 01       	movw	r24, r12
 804:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN7MFRC52210commandTagEhPhiS0_Pi>

	if ((status == MI_OK) && (len == 0x18)) {
 808:	89 2b       	or	r24, r25
 80a:	31 f4       	brne	.+12     	; 0x818 <_ZN7MFRC5229selectTagEPh+0x82>
 80c:	89 81       	ldd	r24, Y+1	; 0x01
 80e:	9a 81       	ldd	r25, Y+2	; 0x02
 810:	48 97       	sbiw	r24, 0x18	; 24
 812:	21 f4       	brne	.+8      	; 0x81c <_ZN7MFRC5229selectTagEPh+0x86>
		sak = buffer[0];
 814:	8b 81       	ldd	r24, Y+3	; 0x03
 816:	03 c0       	rjmp	.+6      	; 0x81e <_ZN7MFRC5229selectTagEPh+0x88>
	}
	else {
		sak = 0;
 818:	80 e0       	ldi	r24, 0x00	; 0
 81a:	01 c0       	rjmp	.+2      	; 0x81e <_ZN7MFRC5229selectTagEPh+0x88>
 81c:	80 e0       	ldi	r24, 0x00	; 0
	}

	return sak;
}
 81e:	2b 96       	adiw	r28, 0x0b	; 11
 820:	0f b6       	in	r0, 0x3f	; 63
 822:	f8 94       	cli
 824:	de bf       	out	0x3e, r29	; 62
 826:	0f be       	out	0x3f, r0	; 63
 828:	cd bf       	out	0x3d, r28	; 61
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	0f 91       	pop	r16
 832:	ff 90       	pop	r15
 834:	ef 90       	pop	r14
 836:	df 90       	pop	r13
 838:	cf 90       	pop	r12
 83a:	08 95       	ret

0000083c <_ZN7MFRC5227haltTagEv>:

int MFRC522::haltTag() {
 83c:	cf 92       	push	r12
 83e:	df 92       	push	r13
 840:	ef 92       	push	r14
 842:	ff 92       	push	r15
 844:	0f 93       	push	r16
 846:	1f 93       	push	r17
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	00 d0       	rcall	.+0      	; 0x84e <_ZN7MFRC5227haltTagEv+0x12>
 84e:	00 d0       	rcall	.+0      	; 0x850 <_ZN7MFRC5227haltTagEv+0x14>
 850:	00 d0       	rcall	.+0      	; 0x852 <_ZN7MFRC5227haltTagEv+0x16>
 852:	cd b7       	in	r28, 0x3d	; 61
 854:	de b7       	in	r29, 0x3e	; 62
 856:	6c 01       	movw	r12, r24
	int status, len;
	uint8_t buffer[4];

	buffer[0] = MF1_HALT;
 858:	80 e5       	ldi	r24, 0x50	; 80
 85a:	8b 83       	std	Y+3, r24	; 0x03
	buffer[1] = 0;
 85c:	1c 82       	std	Y+4, r1	; 0x04
	calculateCRC(buffer, 2, &buffer[2]);
 85e:	9e 01       	movw	r18, r28
 860:	2b 5f       	subi	r18, 0xFB	; 251
 862:	3f 4f       	sbci	r19, 0xFF	; 255
 864:	42 e0       	ldi	r20, 0x02	; 2
 866:	50 e0       	ldi	r21, 0x00	; 0
 868:	be 01       	movw	r22, r28
 86a:	6d 5f       	subi	r22, 0xFD	; 253
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	c6 01       	movw	r24, r12
 870:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_ZN7MFRC52212calculateCRCEPhiS0_>
	status = commandTag(MFRC522_TRANSCEIVE, buffer, 4, buffer, &len);
 874:	ce 01       	movw	r24, r28
 876:	01 96       	adiw	r24, 0x01	; 1
 878:	7c 01       	movw	r14, r24
 87a:	8e 01       	movw	r16, r28
 87c:	0d 5f       	subi	r16, 0xFD	; 253
 87e:	1f 4f       	sbci	r17, 0xFF	; 255
 880:	24 e0       	ldi	r18, 0x04	; 4
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	a8 01       	movw	r20, r16
 886:	6c e0       	ldi	r22, 0x0C	; 12
 888:	c6 01       	movw	r24, r12
 88a:	0e 94 c1 01 	call	0x382	; 0x382 <_ZN7MFRC52210commandTagEhPhiS0_Pi>
 88e:	8c 01       	movw	r16, r24
	clearBitMask(Status2Reg, 0x08);  // turn off encryption
 890:	48 e0       	ldi	r20, 0x08	; 8
 892:	68 e0       	ldi	r22, 0x08	; 8
 894:	c6 01       	movw	r24, r12
 896:	0e 94 75 01 	call	0x2ea	; 0x2ea <_ZN7MFRC52212clearBitMaskEhh>
	return status;
 89a:	c8 01       	movw	r24, r16
 89c:	26 96       	adiw	r28, 0x06	; 6
 89e:	0f b6       	in	r0, 0x3f	; 63
 8a0:	f8 94       	cli
 8a2:	de bf       	out	0x3e, r29	; 62
 8a4:	0f be       	out	0x3f, r0	; 63
 8a6:	cd bf       	out	0x3d, r28	; 61
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	1f 91       	pop	r17
 8ae:	0f 91       	pop	r16
 8b0:	ff 90       	pop	r15
 8b2:	ef 90       	pop	r14
 8b4:	df 90       	pop	r13
 8b6:	cf 90       	pop	r12
 8b8:	08 95       	ret

000008ba <__tablejump2__>:
 8ba:	ee 0f       	add	r30, r30
 8bc:	ff 1f       	adc	r31, r31
 8be:	05 90       	lpm	r0, Z+
 8c0:	f4 91       	lpm	r31, Z
 8c2:	e0 2d       	mov	r30, r0
 8c4:	09 94       	ijmp

000008c6 <_exit>:
 8c6:	f8 94       	cli

000008c8 <__stop_program>:
 8c8:	ff cf       	rjmp	.-2      	; 0x8c8 <__stop_program>
